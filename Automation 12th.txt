package Test;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.Repoter;
import Resource.base;

public class TestCaseOne {

	@Test
	public void TC1_VerifyUserIsAbleToNavigateToAdminPanelByClickingOnWelcomdropdown () throws IOException, InterruptedException {
		//clicking on user btn
		
		base.ClickByXpathSelector(Locators.UserBtn);
		String name1 = "TC1_Verifying welcome dropdown";

		base.TakeScreenshot(name1);


		//clicking on Admin btn
		base.ClickByCssSelector(Locators.adminBtn);

		//ToVerify Admin library Text after clicking on Admin btn
		String text =  base.GetTextByCssSelector(Locators.adminPageHeader);

		//Asserting Page Header
		Assert.assertEquals(text.trim(), "|Admin Library","Mismatch in Title - Admin page");
		base.waitForVisibleByCssSelector(Locators.panels);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);

	}
}

package Test;

import java.io.IOException;

import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseThree {
	
	@Test
	public void TC3_Validate_whether_the_user_can_click_and_navigate_to_Add_PowerBI_Report_to_Library_popup_after_clicking_on_Add_Report_or_New_Dashboard() throws IOException, InterruptedException {
		//verifying 'Add Reports to Library' is displayed 
		base.waitForVisibleByXpath(Locators.Addreports);
		//verifying 'Add Dashboard' is displayed 
		base.waitForVisibleByXpath(Locators.AddDashboard);
		//verfying element to " Add PowerBI Report to Library " is clickable
		base.waitforelementClickable(Locators.AddPowerBiRadioBtn);
		base.ClickByCssSelector(Locators.AddPowerBiRadioBtn);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}

package Test;

import java.io.IOException;

import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseFour {
	
	@Test
	public void TC4_Validate_whether_the_user_can_click_on_Next_by_clicking_on_popup_of_Add_PowerBI_Report_to_Library() throws IOException, InterruptedException {
		//clicking on next button 
		base.ClickByCssSelector(Locators.NextBtn);
		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}

package Test;

import java.io.IOException;

import org.testng.Assert;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseFive {
	@Test
	//Add Testcase name
	public void TC5_Verify_if_the_user_can_see_the_following_message_along_with_the_toggle_that_is_set_on_Disabled_as_default() throws IOException, InterruptedException {
		//verifying Disabled - Toggle button 
		boolean toogleBtnVisibilityStatus = base.checkElementDisplayed(Locators.AzzureAccontToggleBtn);
		if(toogleBtnVisibilityStatus) {
			Boolean ToogleBtnStatus = base.checkElementEnabled(Locators.AzzureAccontToggleBtn);
			Assert.assertFalse(ToogleBtnStatus,"Toogle button Is Displayed but not disbled");
			if (!ToogleBtnStatus) {
				//verifying Description,  Workspace/Group ID, Report/Dashboard ID - Disabled
				String ELementArr[] = {Locators.DescriptionTextBoxDisbaledstate,
						Locators.WorkspaceTextBoxDisbaledstate, 
						Locators.ReportDashboardTextBoxDisbaledstate 
				};
				
				for (int i = 0; i < ELementArr.length; i++) {
					Boolean status = base.checkElementEnabled(ELementArr[i]);
					String[] values = ELementArr[i].split("'");
					Assert.assertFalse(status,values[1]+"Textbox Is Enabled, Expected to be Disabled");
				}
			} else {
				//verifying Description,  Workspace/Group ID, Report/Dashboard ID - Disabled
				String ELementArr[] = {Locators.DescriptionTextBoxDisbaledstate,
						Locators.WorkspaceTextBoxDisbaledstate, 
						Locators.ReportDashboardTextBoxDisbaledstate 
				};
				
				for (int i = 0; i < ELementArr.length; i++) {
					Boolean status = base.checkElementEnabled(ELementArr[i]);
					String[] values = ELementArr[i].split("'");
					Assert.assertFalse(status,"Toogle Button is not Disabled And "+values[1]+" Textbox Is Enabled, Expected to be Disabled");
				}
			}
		}
		else {
			System.out.println("Toogle button Is not displayed");
		}
		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}

package Test;

import java.io.IOException;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.TestData;
import Resource.base;

public class TestCaseSix {
		@Test
	//Add Testcase name
	public void TC6_Verify_if_the_user_is_unable_to_edit_the_WorkspaceID_Description_and_ReportID_field_without_switching_the_toggle_from_Disabled_to_Enabled_in_Add_PowerBI_Report_to_Library_popup() throws IOException, InterruptedException {

		//Enabling Add powerBi report 
		base.ClickByCssSelector(Locators.toggleBtn);
		Thread.sleep(2000);
		// sending values to Description,  Workspace/Group ID, Report/Dashboard ID - Disabled
		
		String ELementArr[] = {
				Locators.DescriptionTextBox,
				Locators.WorkspaceTextBox,
				Locators.ReportAndDashboardTextBox
		};
		String ValueToSend[] = {
				TestData.DescriptionValue,
				TestData.WorkspaceValue,
				TestData.ReportId
		};
		for (int i = 0; i < ELementArr.length; i++) {
			base.SendKeysbyXpath(ELementArr[i],ValueToSend[i]);
		}
		//Taking Screenshot after Applied in Text boxes
		base.TakeScreenshot("Values_applied_In_Description_WorkspaceID_ReportID");

		//clicking on Add report
		base.ClickByCssSelector(Locators.AddReportButton);
		Thread.sleep(2000);
		String AssertStatus = base.GetTextByCssSelector(Locators.AssertStatus);
		
		if (AssertStatus.trim().contains("Already Onboarded")) {
			base.printLog("Assert Already Onboarded " + ":: Message From Header "+AssertStatus);
			
		} else {
			base.printLog(" Assert onboarded Successfully " + ":: Message From Header "+AssertStatus);
			System.out.println(base.driver.switchTo().defaultContent());
		}

		//Taking Screenshot of AssertStatus
		base.TakeScreenshot("TC_6 Assert Status");

		//clicking on Ok Button 
		//base.ClickByCssSelector(Locators.OkBtn);
		WebElement ok = base.driver.findElement(By.xpath(Locators.sadc));
		JavascriptExecutor js = (JavascriptExecutor)base.driver;
		js.executeScript("arguments[0].click();", ok);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
					

		

}

package Test;

import java.io.IOException;

import org.openqa.selenium.By;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.TestData;
import Resource.base;

public class TestCaseSeven {

	
	@Test
	public void TC7Asset_name_update() throws IOException, InterruptedException
	{
		base.ClickByCssSelector(Locators.dashClick);
		Thread.sleep(3000);
		base.ClickByCssSelector(Locators.editClick);

		base.SendKeysbyXpath(Locators.inputbox, TestData.assetName);
		base.ClickByCssSelector(Locators.updBtn);
		Thread.sleep(2000);
		String AssertStatus = base.driver.findElement(By.xpath(Locators.updStatus)).getText();
		base.printLog(AssertStatus);
		base.TakeScreenshot("TC7_Assert_Name_Update");
		Thread.sleep(1000);
		base.ClickByCssSelector(Locators.OkBtn);
		base.ClickByCssSelector(Locators.editClick);
		base.ClickByCssSelector(Locators.updBtn);
		AssertStatus = base.driver.findElement(By.xpath(Locators.updStatus)).getText();
		base.printLog(AssertStatus);
		base.TakeScreenshot("TC7_Assert_Name_Update");
		base.ClickByCssSelector(Locators.OkBtn);
	}
}


package Test;

import java.io.IOException;

import org.openqa.selenium.By;
import org.testng.annotations.Test;

import Resource.Locators;
import Resource.base;

public class TestCaseEight {

	@Test
	 public void TC8_Update_Asset() throws InterruptedException, IOException
	 {
		 base.driver.findElement(By.xpath(Locators.updAsset)).click();
		 base.TakeScreenshot("TC8_Asset_Update_Popup");
		 base.driver.findElement(By.xpath(Locators.updAsset1)).click();
		 Thread.sleep(15000);
		 base.ClickByCssSelector(Locators.OkBtn);
	 }
}

package Test;

import java.io.IOException;

import org.testng.annotations.Test;

import Resource.Locators;
import Resource.Repoter;
import Resource.base;

public class TestCaseTwo {
	
	@Test
	public void TC2_Verify_if_the_user_is_able_to_see_and_click_on__Add_Reports_or_New_dashboard_button_in_the_Admin_Panel ()throws IOException, InterruptedException {
		
		//clicking on Add reports
		base.ClickByCssSelector(Locators.reportBtn);

		//verifying for popup to display
		base.waitForVisibleByCssSelector(Locators.popup);

		// Taking Screenshot & Adding Logs
		String name = new Exception().getStackTrace()[0].getMethodName();
		base.TakeScreenshot(name);
	}
}

package Resource;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Logger;
import org.jboss.aerogear.security.otp.Totp;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.BeforeTest;



import io.github.bonigarcia.wdm.WebDriverManager;

public class base {

	public static WebDriver driver;
	public Properties prop;
	static WebDriverWait wait;
	public static  Logger log =(Logger) LogManager.getLogger(base.class);
	static String currentDir = System.getProperty("user.dir");
	static Locators locator = new Locators();
	public static TakesScreenshot scrShot ;
	public static File SrcFile;
	public static File DestFile;
	public static AccessProperty property = new AccessProperty();
	static Properties Property = property.readPropertiesFile(currentDir+"//src//main//resources//Appdata.properties");


	public static void proxyLogin()
	{

		try
		{
			driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);
			System.out.println("enters");
			Thread.sleep(10000);
			if(driver.findElements(By.xpath("//*[@name='loginfmt']")).size()!=0)
			{
				driver.findElement(By.xpath("//*[@name='loginfmt']")).sendKeys("889050@cognizant.com");
				driver.findElement(By.xpath("//*[@type='submit']")).click();

				Thread.sleep(10000);

				driver.findElement(By.xpath("//*[@name='passwd']")).sendKeys("Yamusri@030898");

				driver.findElement(By.xpath("//*[@type='submit']")).click();
				driver.manage().timeouts().implicitlyWait(15,TimeUnit.SECONDS);

				Thread.sleep(4000);
				//driver.findElement(By.cssSelector("[data-value='PhoneAppOTP']")).click(); //<-------
				Thread.sleep(4000);
				String Key =  Property.getProperty("Key");
				Totp Totp = new Totp(Property.getProperty("Key"));
				 
				driver.findElement(By.xpath("//*[@name='otc']")).sendKeys(Totp.now());
				driver.findElement(By.xpath("//*[@type='submit']")).click();
				driver.findElement(By.xpath("//*[contains(@value,'Yes')]")).click();
				Thread.sleep(10000);
				Thread.sleep(10000);
				System.out.println("sleep done");
			}
			else
			{
				driver.get("https://onecognizant.cognizant.com");
				proxyLogin();
			}

			driver.manage().timeouts().implicitlyWait(15,TimeUnit.SECONDS);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();

		}
	}

	

	public static void navigateToCInsights() {
		//Searching the CInsights inside the One Cognizant
		String Apppcode =  Property.getProperty("AppCode");
		base.waitForVisibleByCssSelector(locator.oneCogSeacrhbar);
		driver.findElement(By.cssSelector(locator.oneCogSeacrhbar)).sendKeys(Apppcode);
		base.waitForVisibleByCssSelector(locator.AppAutosuggestion);
		driver.findElement(By.cssSelector(locator.AppAutosuggestion)).click();

		WebDriver switchframe = driver.switchTo().frame("appFrame");


	}

	//GetText
	public static String GetTextByCssSelector(String Element) {
		base.waitForVisibleByCssSelector(Element);
		//wait.until(ExpectedConditions.visibilityOfElementLocated((By.cssSelector(Element))));
		return  driver.findElement(By.cssSelector(Element)).getText();	
	}

	//SendKeys
	public static void SendKeysByCssSelector(String Element, String ValueToSend) {
		base.waitForVisibleByCssSelector(Element);
		driver.findElement(By.cssSelector(Element)).sendKeys(ValueToSend);	
	}

	//SendKeys
	public static void SendKeysbyXpath(String Element, String ValueToSend) {
		base.waitForVisibleByXpath(Element);
		driver.findElement(By.xpath(Element)).sendKeys(ValueToSend);	
	}

	//Click
	public static void ClickByCssSelector(String Element) {
		base.waitForVisibleByCssSelector(Element);
		driver.findElement(By.cssSelector(Element)).click();	
	}
	
	public static void ClickByXpathSelector(String Element) {
		base.waitForVisibleByXpath(Element);
		driver.findElement(By.xpath(Element)).click();	
	}

	//Click
	public static void ClickByCssSelector(String Element,Boolean VisbilityCheck) {
		if (VisbilityCheck) {
			base.waitForVisibleByCssSelector(Element);
		} 
		driver.findElement(By.cssSelector(Element)).click();	
	}

	public static void waitForVisibleByCssSelector(String Element) {
		wait.until(ExpectedConditions.visibilityOfElementLocated((By.cssSelector(Element))));
	}

	public static void PresenceOfElementByCssSelector(String Element) {
		wait.until(ExpectedConditions.presenceOfElementLocated((By.cssSelector(Element))));
	}

	public static void PresenceOfElementByXpath(String Element) {
		wait.until(ExpectedConditions.presenceOfElementLocated((By.xpath(Element))));
	}

	public static void waitForVisibleByXpath(String Element) {
		wait.until(ExpectedConditions.visibilityOfElementLocated((By.xpath(Element))));
	}

	public static void waitforelementClickable(String Element) {
		wait.until(ExpectedConditions.elementToBeClickable((By.cssSelector(Element))));
	}


	public static void printLog(String LogMessage) {
		log.info(LogMessage);
	}

	public static boolean checkElementEnabled(String Element) {
		return driver.findElement(By.cssSelector(Element)).isEnabled();
	}

	public static boolean checkElementDisplayed(String Element) {
		return driver.findElement(By.cssSelector(Element)).isDisplayed();
	}

	public static String TakeScreenshot(String Screenshotname) throws IOException, InterruptedException {
		Thread.sleep(2000);
		scrShot =((TakesScreenshot)driver);
		SrcFile = scrShot.getScreenshotAs(OutputType.FILE);
		String DestinationLoc = currentDir+"//cinsight.com//AllScreenShots//"+Screenshotname+".png";
		DestFile=new File(DestinationLoc);
		FileUtils.copyFile(SrcFile, DestFile);
		log.info(Screenshotname + " Is Passed");
		return  DestinationLoc;
	}

	public static String TakeScreenshotOnFail(String Screenshotname) throws IOException, InterruptedException {
		Thread.sleep(2000);
		scrShot =((TakesScreenshot)driver);
		SrcFile = scrShot.getScreenshotAs(OutputType.FILE);
		String DestinationLoc = currentDir+"//cinsight.com//FailedScreenshots//"+Screenshotname+".png";
		DestFile=new File(DestinationLoc);
		FileUtils.copyFile(SrcFile, DestFile);
		log.info(Screenshotname + " Is Passed");
		return  DestinationLoc;
	}

	public static void initDriver() throws Exception {
		WebDriverManager.chromedriver().setup();
		driver = new ChromeDriver();	
		base.printLog("Driver initiated Successfully");
		String URL="https://onecsit.cognizant.com/Home";
		driver.get(URL);
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(30,TimeUnit.SECONDS);
		wait = new WebDriverWait(driver, 20);
		base.proxyLogin();
		base.navigateToCInsights();
		Repoter.InitTest();
	}

	public static void Teardown() {
		Repoter.InitTest();
		driver.quit();
	}
}



